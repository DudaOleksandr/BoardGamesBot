Index: .dockerignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.dockerignore b/.dockerignore
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/.dockerignore	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,25 @@
+**/.dockerignore
+**/.env
+**/.git
+**/.gitignore
+**/.project
+**/.settings
+**/.toolstarget
+**/.vs
+**/.vscode
+**/.idea
+**/*.*proj.user
+**/*.dbmdl
+**/*.jfm
+**/azds.yaml
+**/bin
+**/charts
+**/docker-compose*
+**/Dockerfile*
+**/node_modules
+**/npm-debug.log
+**/obj
+**/secrets.dev.yaml
+**/values.dev.yaml
+LICENSE
+README.md
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/.gitignore	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,5 @@
+bin/
+obj/
+/packages/
+riderModule.iml
+/_ReSharper.Caches/
\ No newline at end of file
Index: BoardGamesBot.sln
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot.sln b/BoardGamesBot.sln
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot.sln	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,21 @@
+
+Microsoft Visual Studio Solution File, Format Version 12.00
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "BoardGamesBot", "BoardGamesBot\BoardGamesBot.csproj", "{2AACED57-E9F6-460A-84D0-F009B384948D}"
+EndProject
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Solution Items", "Solution Items", "{C12BA5A7-E36D-44C0-88A3-34F7B76F9C6A}"
+	ProjectSection(SolutionItems) = preProject
+		docker-compose.yml = docker-compose.yml
+	EndProjectSection
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Release|Any CPU = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{2AACED57-E9F6-460A-84D0-F009B384948D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{2AACED57-E9F6-460A-84D0-F009B384948D}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{2AACED57-E9F6-460A-84D0-F009B384948D}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{2AACED57-E9F6-460A-84D0-F009B384948D}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+EndGlobal
Index: BoardGamesBot/BoardGamesBot.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/BoardGamesBot.csproj b/BoardGamesBot/BoardGamesBot.csproj
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/BoardGamesBot.csproj	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,34 @@
+<Project Sdk="Microsoft.NET.Sdk">
+
+    <PropertyGroup>
+        <OutputType>Exe</OutputType>
+        <TargetFramework>net8.0</TargetFramework>
+        <ImplicitUsings>enable</ImplicitUsings>
+        <Nullable>enable</Nullable>
+        <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
+    </PropertyGroup>
+
+    <ItemGroup>
+      <Content Include="..\.dockerignore">
+        <Link>.dockerignore</Link>
+      </Content>
+    </ItemGroup>
+
+    <ItemGroup>
+      <PackageReference Include="Microsoft.Extensions.Configuration" Version="9.0.0" />
+      <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.0" />
+      <PackageReference Include="Microsoft.Extensions.Hosting" Version="9.0.0" />
+      <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
+      <PackageReference Include="Telegram.Bot" Version="22.2.0" />
+    </ItemGroup>
+
+    <ItemGroup>
+      <None Update="commands_mapping.json">
+        <CopyToOutputDirectory>Always</CopyToOutputDirectory>
+      </None>
+      <None Update="appsettings.json">
+        <CopyToOutputDirectory>Always</CopyToOutputDirectory>
+      </None>
+    </ItemGroup>
+
+</Project>
Index: BoardGamesBot/Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Dockerfile b/BoardGamesBot/Dockerfile
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Dockerfile	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,21 @@
+FROM mcr.microsoft.com/dotnet/runtime:8.0 AS base
+USER $APP_UID
+WORKDIR /app
+
+FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
+ARG BUILD_CONFIGURATION=Release
+WORKDIR /src
+COPY ["BoardGamesBot/BoardGamesBot.csproj", "BoardGamesBot/"]
+RUN dotnet restore "BoardGamesBot/BoardGamesBot.csproj"
+COPY . .
+WORKDIR "/src/BoardGamesBot"
+RUN dotnet build "BoardGamesBot.csproj" -c $BUILD_CONFIGURATION -o /app/build
+
+FROM build AS publish
+ARG BUILD_CONFIGURATION=Release
+RUN dotnet publish "BoardGamesBot.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false
+
+FROM base AS final
+WORKDIR /app
+COPY --from=publish /app/publish .
+ENTRYPOINT ["dotnet", "BoardGamesBot.dll"]
Index: BoardGamesBot/Enums/UserState.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Enums/UserState.cs b/BoardGamesBot/Enums/UserState.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Enums/UserState.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,11 @@
+using System.ComponentModel;
+
+namespace BoardGamesBot.Enums;
+
+public enum UserState
+{
+     None,
+     AwaitingCreateRoomName,
+     AwaitingJoinRoomName,
+     AwaitingRoomDate,
+}
\ No newline at end of file
Index: BoardGamesBot/Handlers/CommandHandlers/CommandDispatcher.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Handlers/CommandHandlers/CommandDispatcher.cs b/BoardGamesBot/Handlers/CommandHandlers/CommandDispatcher.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Handlers/CommandHandlers/CommandDispatcher.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,36 @@
+using BoardGamesBot.Interfaces;
+using Telegram.Bot.Types;
+
+namespace BoardGamesBot.Handlers.CommandHandlers;
+
+public class CommandDispatcher
+{
+    private readonly IMessageService _messageService;
+    private readonly Dictionary<string, ICommandHandler> _commandHandlers;
+    private readonly Dictionary<string, string> _commandMappings;
+
+    public CommandDispatcher(IEnumerable<ICommandHandler> commandHandlers, IMessageService messageService,
+        ICommandMappingService commandMappingService)
+    {
+        _messageService = messageService;
+        _commandHandlers = commandHandlers.ToDictionary(
+            handler => handler.GetType().Name.Replace("CommandHandler", "").ToLower());
+        _commandMappings = commandMappingService.GetCommandMappings();
+    }
+
+    public async Task DispatchAsync(long chatId, Update update, CancellationToken cancellationToken)
+    {
+        if (update.Message?.Text == null) return;
+
+        var command = update.Message.Text.Split(' ')[0].TrimStart('/').ToLower();
+
+        if (_commandHandlers.TryGetValue(command, out var handler))
+        {
+            await handler.HandleAsync(chatId, update, cancellationToken);
+        }
+        else
+        {
+            await _messageService.SendMessageAsync(update.Message.Chat.Id, _commandMappings["command_not_found"], cancellationToken: cancellationToken);
+        }
+    }
+}
Index: BoardGamesBot/Handlers/CommandHandlers/CreateRoomCommandHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Handlers/CommandHandlers/CreateRoomCommandHandler.cs b/BoardGamesBot/Handlers/CommandHandlers/CreateRoomCommandHandler.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Handlers/CommandHandlers/CreateRoomCommandHandler.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,31 @@
+using BoardGamesBot.Enums;
+using BoardGamesBot.Interfaces;
+using Telegram.Bot.Types;
+
+namespace BoardGamesBot.Handlers.CommandHandlers;
+
+public class CreateRoomCommandHandler : ICommandHandler
+{
+    private readonly IMessageService _messageService;
+    private readonly IUserStateService _userStateService;
+
+    public CreateRoomCommandHandler(IMessageService messageService, IUserStateService userStateService)
+    {
+        _messageService = messageService;
+        _userStateService = userStateService;
+    }
+    
+    public async Task HandleAsync(long chatId, Update update, CancellationToken cancellationToken)
+    {
+        _userStateService.SetState(chatId, UserState.AwaitingCreateRoomName);
+        var roomName = update.Message.Text.Split(' ', 2).Skip(1).FirstOrDefault();
+        if (string.IsNullOrWhiteSpace(roomName))
+        {
+            await _messageService.SendMessageAsync(update.Message.Chat.Id, "Вкажіть назву кімнати!", cancellationToken: cancellationToken);
+            return;
+        }
+
+        // Логіка створення кімнати
+        await _messageService.SendMessageAsync(update.Message.Chat.Id, $"Кімната '{roomName}' створена!", cancellationToken: cancellationToken);
+    }
+}
Index: BoardGamesBot/Handlers/CommandHandlers/HelpCommandHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Handlers/CommandHandlers/HelpCommandHandler.cs b/BoardGamesBot/Handlers/CommandHandlers/HelpCommandHandler.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Handlers/CommandHandlers/HelpCommandHandler.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,28 @@
+using BoardGamesBot.Enums;
+using BoardGamesBot.Interfaces;
+using Telegram.Bot.Types;
+
+namespace BoardGamesBot.Handlers.CommandHandlers;
+
+public class HelpCommandHandler : ICommandHandler
+{
+    private readonly IMessageService _messageService;
+    private readonly IUserStateService _userStateService;
+
+    public HelpCommandHandler(IMessageService messageService, IUserStateService userStateService)
+    {
+        _messageService = messageService;
+        _userStateService = userStateService;
+    }
+    
+    public async Task HandleAsync(long chatId, Update update, CancellationToken cancellationToken)
+    {
+        _userStateService.SetState(chatId, UserState.None);
+        var helpText = "Доступні команди:\n" +
+                       "/create_room НазваКімнати - створити кімнату\n" +
+                       "/join_room НазваКімнати - приєднатися до кімнати\n" +
+                       "/help - список команд";
+        
+        await _messageService.SendMessageAsync(update.Message.Chat.Id, helpText, cancellationToken: cancellationToken);
+    }
+}
Index: BoardGamesBot/Handlers/CommandHandlers/JoinRoomCommandHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Handlers/CommandHandlers/JoinRoomCommandHandler.cs b/BoardGamesBot/Handlers/CommandHandlers/JoinRoomCommandHandler.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Handlers/CommandHandlers/JoinRoomCommandHandler.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,37 @@
+using BoardGamesBot.Enums;
+using BoardGamesBot.Interfaces;
+using Telegram.Bot.Types;
+
+namespace BoardGamesBot.Handlers.CommandHandlers;
+
+public class JoinRoomCommandHandler : ICommandHandler
+{
+    
+    private readonly IMessageService _messageService;
+    private readonly IUserStateService _userStateService;
+
+    public JoinRoomCommandHandler(IMessageService messageService, IUserStateService userStateService)
+    {
+        _messageService = messageService;
+        _userStateService = userStateService;
+    }
+    
+    public async Task HandleAsync(long chatId, Update update, CancellationToken cancellationToken)
+    {
+        var parts = update.Message.Text.Split(' ', 2);
+        if (parts.Length < 2)
+        {
+            _userStateService.SetState(chatId, UserState.AwaitingJoinRoomName);
+            
+            await _messageService.SendMessageAsync(update.Message.Chat.Id, 
+                "Вкажіть назву кімнати! Приклад: /join_room НазваКімнати", cancellationToken: cancellationToken);
+            return;
+        }
+
+        var roomName = parts[1];
+        _userStateService.SetState(chatId, UserState.None);
+        // Логіка долучення до кімнати
+        await _messageService.SendMessageAsync(update.Message.Chat.Id, 
+            $"Ви приєдналися до кімнати '{roomName}'.", cancellationToken: cancellationToken);
+    }
+}
Index: BoardGamesBot/Handlers/UserStatesHandlers/AwaitingRoomNameStateHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Handlers/UserStatesHandlers/AwaitingRoomNameStateHandler.cs b/BoardGamesBot/Handlers/UserStatesHandlers/AwaitingRoomNameStateHandler.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Handlers/UserStatesHandlers/AwaitingRoomNameStateHandler.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,25 @@
+using BoardGamesBot.Enums;
+using BoardGamesBot.Interfaces;
+
+namespace BoardGamesBot.Handlers.UserStatesHandlers;
+
+public class AwaitingRoomNameStateHandler : IUserStateHandler
+{
+    private readonly IMessageService _messageService;
+    private readonly IUserStateService _userStateService;
+
+    public AwaitingRoomNameStateHandler(IMessageService messageService, IUserStateService userStateService)
+    {
+        _messageService = messageService;
+        _userStateService = userStateService;
+    }
+
+    public UserState State => UserState.AwaitingCreateRoomName;
+
+    public async Task HandleAsync(long chatId, string message, CancellationToken cancellationToken)
+    {
+        // Обробляємо відповідь користувача
+        await _messageService.SendMessageAsync(chatId, $"Кімната '{message}' створена!", cancellationToken);
+        _userStateService.ClearState(chatId);
+    }
+}
Index: BoardGamesBot/Handlers/UserStatesHandlers/UserStateDispatcher.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Handlers/UserStatesHandlers/UserStateDispatcher.cs b/BoardGamesBot/Handlers/UserStatesHandlers/UserStateDispatcher.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Handlers/UserStatesHandlers/UserStateDispatcher.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,27 @@
+using BoardGamesBot.Enums;
+using BoardGamesBot.Interfaces;
+
+namespace BoardGamesBot.Handlers.UserStatesHandlers;
+
+public class UserStateDispatcher
+{
+    private readonly Dictionary<UserState, IUserStateHandler> _stateHandlers;
+
+    public UserStateDispatcher(IEnumerable<IUserStateHandler> stateHandlers)
+    {
+        _stateHandlers = stateHandlers.ToDictionary(handler => handler.State);
+    }
+
+    public async Task DispatchAsync(long chatId, string message, UserState userState, CancellationToken cancellationToken)
+    {
+        if (_stateHandlers.TryGetValue(userState, out var handler))
+        {
+            await handler.HandleAsync(chatId, message, cancellationToken);
+        }
+        else
+        {
+            throw new InvalidOperationException($"Обробник для стану '{userState}' не знайдено.");
+        }
+    }
+}
+
Index: BoardGamesBot/Interfaces/ICommandHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Interfaces/ICommandHandler.cs b/BoardGamesBot/Interfaces/ICommandHandler.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Interfaces/ICommandHandler.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,9 @@
+using Telegram.Bot;
+using Telegram.Bot.Types;
+
+namespace BoardGamesBot.Interfaces;
+
+public interface ICommandHandler
+{
+    Task HandleAsync(long chatId, Update update, CancellationToken cancellationToken);
+}
\ No newline at end of file
Index: BoardGamesBot/Interfaces/ICommandMappingService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Interfaces/ICommandMappingService.cs b/BoardGamesBot/Interfaces/ICommandMappingService.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Interfaces/ICommandMappingService.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,6 @@
+namespace BoardGamesBot.Interfaces;
+
+public interface ICommandMappingService
+{
+    Dictionary<string, string> GetCommandMappings();
+}
\ No newline at end of file
Index: BoardGamesBot/Interfaces/IMessageService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Interfaces/IMessageService.cs b/BoardGamesBot/Interfaces/IMessageService.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Interfaces/IMessageService.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,6 @@
+namespace BoardGamesBot.Interfaces;
+
+public interface IMessageService
+{
+    Task SendMessageAsync(long chatId, string message, CancellationToken cancellationToken);
+}
Index: BoardGamesBot/Interfaces/IUserStateHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Interfaces/IUserStateHandler.cs b/BoardGamesBot/Interfaces/IUserStateHandler.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Interfaces/IUserStateHandler.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,9 @@
+using BoardGamesBot.Enums;
+
+namespace BoardGamesBot.Interfaces;
+
+public interface IUserStateHandler
+{
+    UserState State { get; }
+    Task HandleAsync(long chatId, string message, CancellationToken cancellationToken);
+}
Index: BoardGamesBot/Interfaces/IUserStateService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Interfaces/IUserStateService.cs b/BoardGamesBot/Interfaces/IUserStateService.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Interfaces/IUserStateService.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,10 @@
+using BoardGamesBot.Enums;
+
+namespace BoardGamesBot.Interfaces;
+
+public interface IUserStateService
+{
+    void SetState(long chatId, UserState state);
+    UserState GetState(long chatId);
+    void ClearState(long chatId);
+}
Index: BoardGamesBot/Interfaces/MessageService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Interfaces/MessageService.cs b/BoardGamesBot/Interfaces/MessageService.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Interfaces/MessageService.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,14 @@
+using Microsoft.Extensions.Logging;
+using Telegram.Bot;
+
+namespace BoardGamesBot.Interfaces;
+
+public class MessageService(ITelegramBotClient botClient, ILogger<MessageService> logger)
+    : IMessageService
+{
+    public async Task SendMessageAsync(long chatId, string message, CancellationToken cancellationToken)
+    {
+        await botClient.SendMessage(chatId, message, cancellationToken: cancellationToken);
+        logger.LogInformation($"Chat {chatId}: Sent message: {message}");
+    }
+}
Index: BoardGamesBot/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Program.cs b/BoardGamesBot/Program.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Program.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,50 @@
+using BoardGamesBot.Handlers.CommandHandlers;
+using BoardGamesBot.Handlers.UserStatesHandlers;
+using BoardGamesBot.Interfaces;
+using BoardGamesBot.Services;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+using Microsoft.Extensions.Hosting;
+using Microsoft.Extensions.Logging;
+using Telegram.Bot;
+
+var host = Host.CreateDefaultBuilder(args)
+    .ConfigureAppConfiguration((_, config) =>
+    {
+        config.SetBasePath(Directory.GetCurrentDirectory());
+        config.AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);
+    })
+    .ConfigureServices((context, services) =>
+    {
+        services.AddLogging(logging =>
+        {
+            logging.ClearProviders(); // Clear default providers
+            logging.AddConsole();    // Add console logging
+        });
+        ConfigureServices(services, context.Configuration);
+    })
+    .Build();
+
+await host.RunAsync();
+return;
+
+
+static void ConfigureServices(IServiceCollection services, IConfiguration configuration)
+{
+    services.AddSingleton<ITelegramBotClient>(_ =>
+    {
+        var botToken = configuration["TelegramBotToken"];
+        return new TelegramBotClient(botToken);
+    });
+    services.AddSingleton<ICommandMappingService, CommandMappingService>();
+    services.AddSingleton<IUserStateService, UserStateService>();
+    services.AddSingleton<IMessageService, MessageService>();
+    services.AddSingleton<ICommandHandler, CreateRoomCommandHandler>();
+    services.AddSingleton<ICommandHandler, JoinRoomCommandHandler>();
+    services.AddSingleton<ICommandHandler, HelpCommandHandler>();
+    services.AddSingleton<CommandDispatcher>();
+    services.AddSingleton<IUserStateHandler, AwaitingRoomNameStateHandler>();
+    services.AddSingleton<UserStateDispatcher>();
+    services.AddHostedService<BotService>(); // Register BotService as a hosted service
+
+}
\ No newline at end of file
Index: BoardGamesBot/Services/BotService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Services/BotService.cs b/BoardGamesBot/Services/BotService.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Services/BotService.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,74 @@
+using BoardGamesBot.Enums;
+using BoardGamesBot.Handlers.CommandHandlers;
+using BoardGamesBot.Handlers.UserStatesHandlers;
+using BoardGamesBot.Interfaces;
+using Telegram.Bot;
+using Telegram.Bot.Types;
+using Microsoft.Extensions.Hosting;
+using Microsoft.Extensions.Logging;
+
+namespace BoardGamesBot.Services;
+
+public class BotService : IHostedService
+{
+    private readonly ILogger<BotService> _logger;
+    private readonly ITelegramBotClient _botClient;
+    private readonly CommandDispatcher  _commandDispatcher;
+    private readonly UserStateDispatcher _userStateDispatcher;
+    private readonly IUserStateService _userStateService;
+
+    public BotService(ILogger<BotService> logger, CommandDispatcher commandDispatcher,
+        IUserStateService userStateService, UserStateDispatcher userStateDispatcher, ITelegramBotClient botClient)
+    {
+        _logger = logger;
+        _commandDispatcher = commandDispatcher;
+        _userStateService = userStateService;
+        _userStateDispatcher = userStateDispatcher;
+        _botClient = botClient;
+    }
+    
+    public Task StartAsync(CancellationToken cancellationToken)
+    {
+        _logger.LogInformation("Bot service started.");
+        _botClient.StartReceiving(
+            HandleUpdateAsync,
+            HandleErrorAsync,
+            cancellationToken: cancellationToken
+        );
+        _logger.LogInformation("Listening for updates...");
+        return Task.CompletedTask;
+    }
+
+    public Task StopAsync(CancellationToken cancellationToken)
+    {
+        _logger.LogInformation("Bot is stopping...");
+        return Task.CompletedTask;
+    }
+
+    private async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update,
+        CancellationToken cancellationToken)
+    {
+        if (update.Message?.Text is null) return;
+        
+        var chatId = update.Message.Chat.Id;
+        var message = update.Message.Text;
+        
+        var userState = _userStateService.GetState(chatId);
+        if (userState != UserState.None)
+        {
+            await _userStateDispatcher.DispatchAsync(chatId, message, userState, cancellationToken);
+            return;
+        }
+
+        if (message.StartsWith('/'))
+        {
+            await _commandDispatcher.DispatchAsync(chatId, update, cancellationToken);
+        }
+    }
+    
+    private Task HandleErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
+    {
+        _logger.LogError($"Error: {exception.Message}");
+        return Task.CompletedTask;
+    }
+}
\ No newline at end of file
Index: BoardGamesBot/Services/CommandMappingService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Services/CommandMappingService.cs b/BoardGamesBot/Services/CommandMappingService.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Services/CommandMappingService.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,21 @@
+using BoardGamesBot.Interfaces;
+using Microsoft.Extensions.Configuration;
+using Newtonsoft.Json;
+
+namespace BoardGamesBot.Services;
+
+public class CommandMappingService : ICommandMappingService
+{
+    private readonly Dictionary<string, string> _commandMappings;
+
+    public CommandMappingService(IConfiguration configuration)
+    {
+        var jsonPath = configuration["CommandsJson"];
+        _commandMappings = JsonConvert.DeserializeObject<Dictionary<string, string>>(File.ReadAllText(jsonPath));
+    }
+
+    public Dictionary<string, string> GetCommandMappings()
+    {
+        return _commandMappings;
+    }
+}
\ No newline at end of file
Index: BoardGamesBot/Services/UserStateService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/Services/UserStateService.cs b/BoardGamesBot/Services/UserStateService.cs
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/Services/UserStateService.cs	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,24 @@
+using BoardGamesBot.Enums;
+using BoardGamesBot.Interfaces;
+
+namespace BoardGamesBot.Services;
+
+public class UserStateService : IUserStateService
+{
+    private readonly Dictionary<long, UserState> _userStates = new();
+
+    public void SetState(long chatId, UserState state)
+    {
+        _userStates[chatId] = state;
+    }
+
+    public UserState GetState(long chatId)
+    {
+        return _userStates.GetValueOrDefault(chatId, UserState.None);
+    }
+
+    public void ClearState(long chatId)
+    {
+        _userStates.Remove(chatId);
+    }
+}
\ No newline at end of file
Index: BoardGamesBot/appsettings.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/appsettings.json b/BoardGamesBot/appsettings.json
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/appsettings.json	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,5 @@
+{
+    "TelegramBotToken": "1862210473:AAGvFCyGufe3ExGq74jEYsV4J1KiGczrAOk",
+    "LocalTelegramAPI" : "http://192.168.0.6:8081",
+    "CommandsJson" : "commands_mapping.json"
+}
\ No newline at end of file
Index: BoardGamesBot/commands_mapping.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BoardGamesBot/commands_mapping.json b/BoardGamesBot/commands_mapping.json
new file mode 100644
--- /dev/null	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
+++ b/BoardGamesBot/commands_mapping.json	(revision 7b50653c26c79f2fb72e8be3743b9b7c756fe559)
@@ -0,0 +1,9 @@
+{
+  "/start": "Hello and Welcome. My name is Board Games Bot.",
+  "/create_room": "Hello and Welcome. My name is Board Games Bot.",
+  "/join_room": "Hello and Welcome. My name is Board Games Bot.",
+  "/create_session": "Hello and Welcome. My name is Board Games Bot.",
+  "default": "Something went wrong. Try again later.",
+  "command_not_found" : "Command was not found. Please send another command or use `/help` to get list of available commands.",
+  "unsupported_input" : "Unsupported input. Please send another command"
+}
\ No newline at end of file
